name: Version Bump (Safe)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get latest tag
      id: get-latest-tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v6.4.0")
        echo "latest-tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
        echo "Latest tag: $LATEST_TAG"
    
    - name: Determine version bump
      id: version-bump
      run: |
        LATEST_TAG="${{ steps.get-latest-tag.outputs.latest-tag }}"
        
        # Manual trigger
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
        else
          # Automatic based on commits
          COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline)
          
          if [ -z "$COMMITS" ]; then
            echo "No new commits, skipping"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          BUMP_TYPE="patch"
          if echo "$COMMITS" | grep -qE "^[a-f0-9]+ feat(\(.+\))?:"; then
            BUMP_TYPE="minor"
          fi
          if echo "$COMMITS" | grep -qE "!:|BREAKING CHANGE"; then
            BUMP_TYPE="major"
          fi
        fi
        
        echo "bump-type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
        echo "skip=false" >> "$GITHUB_OUTPUT"
        echo "Bump type: $BUMP_TYPE"
    
    - name: Calculate new version
      if: steps.version-bump.outputs.skip != 'true'
      id: new-version
      run: |
        LATEST_TAG="${{ steps.get-latest-tag.outputs.latest-tag }}"
        BUMP_TYPE="${{ steps.version-bump.outputs.bump-type }}"
        
        VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-6}
        MINOR=${VERSION_PARTS[1]:-4}
        PATCH=${VERSION_PARTS[2]:-0}
        
        case $BUMP_TYPE in
          major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
          minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
          patch) PATCH=$((PATCH + 1)) ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_TAG="v$NEW_VERSION"
        
        echo "new-version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
        echo "new-tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
        echo "New version: $NEW_VERSION ($NEW_TAG)"
    
    - name: Update files and create tag
      if: steps.version-bump.outputs.skip != 'true'
      run: |
        NEW_VERSION="${{ steps.new-version.outputs.new-version }}"
        NEW_TAG="${{ steps.new-version.outputs.new-tag }}"
        
        # Update VERSION file
        echo "$NEW_VERSION" > VERSION
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Only create tag (don't commit to main to avoid permission issues)
        git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
        git push origin "$NEW_TAG"
        
        echo "Created and pushed tag: $NEW_TAG"
        echo "VERSION file updated to: $NEW_VERSION"
    
    - name: Create Release
      if: steps.version-bump.outputs.skip != 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.new-version.outputs.new-tag }}
        name: Release ${{ steps.new-version.outputs.new-tag }}
        body: |
          ## What's Changed
          
          Automated release with version bump to ${{ steps.new-version.outputs.new-tag }}
          
          ### Installation
          ```bash
          git clone https://github.com/akasha-code/wg-manager.git
          cd wg-manager
          ./install.sh
          ```
          
          **Full Changelog**: https://github.com/akasha-code/wg-manager/commits/${{ steps.new-version.outputs.new-tag }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}