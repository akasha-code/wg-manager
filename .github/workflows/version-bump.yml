name: Auto Version Bump

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Get latest tag
      id: get-latest-tag
      run: |
        # Get the latest tag, fallback to v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"
    
    - name: Determine version bump
      id: version-bump
      run: |
        # Get commits since last tag
        LATEST_TAG="${{ steps.get-latest-tag.outputs.latest-tag }}"
        
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          # First release
          COMMITS=$(git log --oneline)
        else
          COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline)
        fi
        
        echo "Commits since last tag:"
        echo "$COMMITS"
        
        # Check if there are actually new commits
        if [ -z "$COMMITS" ]; then
          echo "No new commits since last tag, skipping version bump"
          echo "skip=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Determine bump type based on commit messages
        BUMP_TYPE="patch"  # default
        
        if echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.+\))?!?:"; then
          BUMP_TYPE="minor"
        fi
        
        if echo "$COMMITS" | grep -qE "^[a-f0-9]+ .+!:"; then
          BUMP_TYPE="major"
        fi
        
        if echo "$COMMITS" | grep -qiE "^[a-f0-9]+ .*BREAKING CHANGE"; then
          BUMP_TYPE="major"
        fi
        
        echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "skip=false" >> $GITHUB_OUTPUT
        echo "Determined bump type: $BUMP_TYPE"
    
    - name: Calculate new version
      if: steps.version-bump.outputs.skip != 'true'
      id: new-version
      run: |
        LATEST_TAG="${{ steps.get-latest-tag.outputs.latest-tag }}"
        BUMP_TYPE="${{ steps.version-bump.outputs.bump-type }}"
        
        # Remove 'v' prefix if present
        VERSION=${LATEST_TAG#v}
        
        # Split version into components
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Bump version based on type
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_TAG="v$NEW_VERSION"
        
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new-tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        echo "New tag: $NEW_TAG"
    
    - name: Update VERSION file and commit
      if: steps.version-bump.outputs.skip != 'true'
      run: |
        NEW_VERSION="${{ steps.new-version.outputs.new-version }}"
        NEW_TAG="${{ steps.new-version.outputs.new-tag }}"
        
        # Update VERSION file
        echo "$NEW_VERSION" > VERSION
        echo "Updated VERSION file to: $NEW_VERSION"
        
        # Check if there are changes to commit
        if git diff --quiet VERSION; then
          echo "No changes to VERSION file, skipping commit"
          exit 0
        fi
        
        # Add and commit VERSION file
        git add VERSION
        git commit -m "chore: bump version to $NEW_TAG [skip ci]"
        
        # Create and push tag
        git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
        
        # Push changes and tag
        git push origin main
        git push origin "$NEW_TAG"
    
    - name: Create GitHub Release
      if: steps.version-bump.outputs.skip != 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new-version.outputs.new-tag }}
        release_name: Release ${{ steps.new-version.outputs.new-tag }}
        body: |
          Automated release ${{ steps.new-version.outputs.new-tag }}
          
          Changes in this release:
          - Automatic version bump based on commit messages
          - See commit history for detailed changes
        draft: false
        prerelease: false